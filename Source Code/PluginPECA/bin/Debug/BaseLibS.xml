<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BaseLibS</name>
    </assembly>
    <members>
        <member name="T:BaseLibS.Api.ClassificationModel">
            <summary>
            Class storing the information resulting from the training process of a classification algorithm.
            Each classifier will have its own implementation of <code>ClassificationModel</code>.
            </summary>
        </member>
        <member name="M:BaseLibS.Api.ClassificationModel.PredictStrength(BaseLibS.Num.Vector.BaseVector)">
            <summary>
            Class prediction for a single instance.
            </summary>
            <param name="x">Test instance</param>
            <returns>Prediction strength for the different classes. The one with the biggest value is the assigned class.</returns>
        </member>
        <member name="T:BaseLibS.Api.IDistanceMatrix">
            <summary>
            Distance matrix interface for use in clustering methods where calculating pairwise distances
            using <see cref="T:BaseLibS.Api.IDistance"/> would be to expensive.
            <remarks>Requires quadratic memory</remarks>
            </summary>
        </member>
        <member name="P:BaseLibS.Api.IDistanceMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Distance between <code>i</code> and <code>j</code>.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="P:BaseLibS.Api.IDistanceMatrix.N">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="M:BaseLibS.Api.IDistanceMatrix.AsCondensed">
            <summary>
            Returns the distance matrix as condensed array with N x (N - 1) / 2 elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Api.IDistanceMatrix.AsQuadratic">
            <summary>
            Returns the distance matrix as symmetric 2D array with (N, N) elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Api.ClassificationMethod.Train(BaseLibS.Num.Vector.BaseVector[],System.Int32[],System.Int32[][],System.Int32,BaseLibS.Param.Parameters,System.Int32,System.Action{System.Double})">
            <summary>
            Create a classification model based on the given training data x with group assignments in y.
            </summary>
            <param name="x">The training data for which the group assignment is known. <code>x.Length</code> 
            is the number of training instances. All <code>BaseVector</code> instances in the array must have 
            the same length.</param>
            <param name="nominal">Indicates if a feature is nominal. Has the same length as the <code>BaseVector</code> 
            instances in the <code>x</code> array. In case it is null, all features are assumed to be numerical. If it is
            not null, each array element corresponds to a feature. If the value is less than 2, the corresponding feature 
            is assumed to be numerical. Otherwise the feture is nominal, with the value indicating the number of possible 
            classes for this nominal feature. The classes are assumed to be encoded as zero-based integer values in the 
            corresponding positions in the BaseVector instances of the training data.</param>
            <param name="y">The group assignments. <code>y.Length</code> is the number of training instances.
            In principle each training item can be assigned to multiple groups which is why this is an
            array of arrays. Each item has to be assigned to at least one group.</param>
            <param name="ngroups">The number of groups which has to be at least two.</param>
            <param name="param"><code>Parameters</code> object holding the user-defined values for the parameters
            of the classification algorithm.</param>
            <param name="nthreads">Number of threads the algorithm can use in case it supports parallelization.</param>
            <param name="reportProgress">Call back to return a number between 0 and 1 reflecting the progress 
            of the calculation.</param>
            <returns></returns>
        </member>
        <member name="P:BaseLibS.Api.ClassificationMethod.Parameters">
            <summary>
            Gets the <code>Parameters</code> object which is to be filled with the user-defined values.
            </summary>
        </member>
        <member name="T:BaseLibS.Api.IDistance">
            <summary>
            Ancestor class of all distances. Distances are needed e.g. for hierarchical clustering
            or k-nearest neighbour classification. 
            </summary>
        </member>
        <member name="M:BaseLibS.Api.IDistance.Get(System.Collections.Generic.IList{System.Single},System.Collections.Generic.IList{System.Single})">
            <summary>
            Calculates the distance between two vectors. The two vectors must have the same length.
            </summary>
            <param name="x">The first vector.</param>
            <param name="y">The second vector.</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Api.IDistance.Get(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Calculates the distance between two vectors. The two vectors must have the same length.
            </summary>
            <param name="x">The first vector.</param>
            <param name="y">The second vector.</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Api.IDistance.Get(BaseLibS.Num.Vector.BaseVector,BaseLibS.Num.Vector.BaseVector)">
            <summary>
            Calculates the distance between two vectors. The two vectors must have the same length.
            </summary>
            <param name="x">The first vector.</param>
            <param name="y">The second vector.</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Api.IDistance.Get(System.Single[0:,0:],System.Single[0:,0:],System.Int32,System.Int32,BaseLibS.Api.MatrixAccess)">
            <summary>
            This method returns the distance between two row or column vectors in two matrices.
            The matrices must have the same number of rows or columns (depending on the access type 
            being column or row). 
            </summary>
            <param name="data1">The matrix from which the first row/column is taken.</param>
            <param name="data2">The matrix from which the second row/column is taken.</param>
            <param name="index1">The row/column index in the first matrix.</param>
            <param name="index2">The row/column index in the second matrix.</param>
            <param name="access">Specifes whether the kernel function is evaluated on row or column vectors.</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Api.IDistance.Get(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Int32,BaseLibS.Api.MatrixAccess)">
            <summary>
            This method returns the distance between two row or column vectors in two matrices.
            The matrices must have the same number of rows or columns (depending on the access type 
            being column or row). 
            </summary>
            <param name="data1">The matrix from which the first row/column is taken.</param>
            <param name="data2">The matrix from which the second row/column is taken.</param>
            <param name="index1">The row/column index in the first matrix.</param>
            <param name="index2">The row/column index in the second matrix.</param>
            <param name="access">Specifes whether the kernel function is evaluated on row or column vectors.</param>
            <returns></returns>
        </member>
        <member name="P:BaseLibS.Api.INamedItem.Name">
            <summary>
            This is the name that e.g. appears in drop-down menus.
            </summary>
        </member>
        <member name="P:BaseLibS.Api.INamedItem.Description">
            <summary>
            The context help that will appear in tool tips etc. 
            </summary>
        </member>
        <member name="P:BaseLibS.Api.INamedListItem.DisplayRank">
            <summary>
            This number controls the order in which items are displayed e.g. in drop down menus.
            </summary>
        </member>
        <member name="P:BaseLibS.Api.INamedListItem.IsActive">
            <summary>
            If false is returned, the item will not be available.
            </summary>
        </member>
        <member name="M:BaseLibS.Api.RegressionMethod.Train(BaseLibS.Num.Vector.BaseVector[],System.Int32[],System.Double[],BaseLibS.Param.Parameters,System.Int32,System.Action{System.Double})">
            <summary>
            Create a classification model based on the given training data x with group assignments in y.
            </summary>
            <param name="x">The training data for which the group assignment is known. <code>x.Length</code> 
            is the number of training instances. All <code>BaseVector</code> instances in the array must have 
            the same length.</param>
            <param name="nominal">Indicates if a feature is nominal. Has the same length as the <code>BaseVector</code> 
            instances in the <code>x</code> array. In case it is null, all features are assumed to be numerical. If it is
            not null, each array element corresponds to a feature. If the value is less than 2, the corresponding feature 
            is assumed to be numerical. Otherwise the feture is nominal, with the value indicating the number of possible 
            classes for this nominal feature. The classes are assumed to be encoded as zero-based integer values in the 
            corresponding positions in the BaseVector instances of the training data.</param>
            <param name="y">The output variable. <code>y.Length</code> is the number of training instances.
            In principle each training item can be assigned to multiple groups which is why this is an
            array of arrays. Each item has to be assigned to at least one group.</param>
            <param name="param"><code>Parameters</code> object holding the user-defined values for the parameters
            of the classification algorithm.</param>
            <param name="nthreads">Number of threads the algorithm can use in case it supports parallelization.</param>
            <param name="reportProgress">Call back to return a number between 0 and 1 reflecting the progress 
            of the calculation.</param>
            <returns></returns>
        </member>
        <member name="P:BaseLibS.Api.RegressionMethod.Parameters">
            <summary>
            Gets the <code>Parameters</code> object which is to be filled with the user-defined values.
            </summary>
        </member>
        <member name="T:BaseLibS.Api.MatrixAccess">
            <summary>
            This enumeration is used as an indicator whether matrices are accessed row or column wise.
            </summary>
        </member>
        <member name="F:BaseLibS.Calc.Util.BigRational.numerator">
            <summary>
            Numerator and denominator have no common divisor.
            </summary>
        </member>
        <member name="F:BaseLibS.Calc.Util.BigRational.denominator">
            <summary>
            Numerator and denominator have no common divisor. Denominator is positive.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Image.Quantizers.PaletteQuantizer.GetPalette">
            <inheritdoc/>
        </member>
        <member name="F:BaseLibS.Graph.Bitmap2.data">
            <summary>
            Matrix with argb values of pixels which are assumed to be represented as int containing 
            one byte for a, r, g and b each.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Bitmap2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <code>Bitmap2</code> class with the specified size.
            </summary>
            <param name="width">The width in pixels.</param>
            <param name="height">The height in pixels.</param>
        </member>
        <member name="M:BaseLibS.Graph.Bitmap2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <code>Bitmap2</code> class from the specified file.
            </summary>
            <param name="filename">The bitmap file name and path.</param>
        </member>
        <member name="M:BaseLibS.Graph.Bitmap2.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <code>Bitmap2</code> class from the specified data stream.
            </summary>
            <param name="stream">The data stream used to load the image.</param>
        </member>
        <member name="F:BaseLibS.Graph.Color2.value">
            <summary>
            will contain standard 32bit sRGB (ARGB) 
            </summary>
        </member>
        <member name="F:BaseLibS.Graph.Color2.knownColor">
            <summary>
            ignored, unless "state" says it is valid 
            </summary>
        </member>
        <member name="F:BaseLibS.Graph.Color2.state">
            <summary>
            implementation specific information 
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.Color2.R">
            <summary>
            Gets the red component value for this <code>Color2</code>.
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.Color2.G">
            <summary>
            Gets the green component value for this <code>Color2</code>.
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.Color2.B">
            <summary>
            Gets the blue component value for this <code>Color2</code>.
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.Color2.A">
            <summary>
            Gets the alpha component value for this <code>Color2</code>.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.GetR(System.Int32)">
            <summary>
            Gets the red component value for the given <code>value</code>.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.GetG(System.Int32)">
            <summary>
            Gets the green component value for the given <code>value</code>.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.GetB(System.Int32)">
            <summary>
            Gets the blue component value for the given <code>value</code>.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.GetA(System.Int32)">
            <summary>
            Gets the alpha component value for the given <code>value</code>.
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.Color2.IsKnownColor">
            <summary>
            Specifies whether this <code>Color2</code> is a known (predefined) color.
            Predefined colors are defined in the <code>KnownColor</code> enum.
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.Color2.IsEmpty">
            <summary>
               Specifies whether this <code>Color2</code> is uninitialized.
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.Color2.IsNamedColor">
            <summary>
               Specifies whether this <code>Color2</code> has a name or is a <code>KnownColor</code>. 
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.Color2.IsSystemColor">
            <summary>
                Determines if this color is a system color.
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.Color2.Name">
            <summary>
                  Gets the name of this <code>Color2</code> . This will either return the user
                  defined name of the color, if the color was created from a name, or 
                  the name of the known color. For custom colors, the RGB value will 
                  be returned.
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.Color2.Value">
            <summary>
                Actual color to be rendered. 
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.MakeArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Encodes the four values into ARGB (32 bit) format.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.FromArgb(System.Int32)">
            <summary>
            Creates a Color from its 32-bit component (alpha, red, green, and blue) values.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                  Creates a Color from its 32-bit component (alpha, red, green, and blue) values.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.FromArgb(System.Int32,BaseLibS.Graph.Color2)">
            <summary>
                  Creates a new <code>Color2</code> from the specified <code>Color2</code>, but with 
                  the new specified alpha value.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
                  Creates a <code>Color2</code> from the specified red, green, and
                  blue values.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.FromKnownColor(BaseLibS.Graph.KnownColor)">
            <summary>
                  Creates a <code>Color2</code> from the specified <code>KnownColor</code> . 
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.GetBrightness">
            <summary>
                  Returns the Hue-Saturation-Brightness (HSB) brightness
                  for this <code>Color2</code>. 
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.GetHue">
            <summary>
                  Returns the Hue-Saturation-Brightness (HSB) hue 
                  value, in degrees, for this <code>Color2</code>.
                  If R == G == B, the hue is meaningless, and the return value is 0. 
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.GetSaturation">
            <summary>
                  The Hue-Saturation-Brightness (HSB) saturation for this 
               <code>Color2</code>.
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.Color2.ToArgb">
            <summary>
                  Returns the ARGB value of this <code>Color2</code>.
            </summary>
            
        </member>
        <member name="F:BaseLibS.Graph.DashCap2.Flat">
            <summary>
            Specifies a square cap that squares off both ends of each dash.
            </summary>
        </member>
        <member name="F:BaseLibS.Graph.DashCap2.Round">
            <summary>
            Specifies a circular cap that rounds off both ends of each dash.
            </summary>
        </member>
        <member name="F:BaseLibS.Graph.DashCap2.Triangle">
            <summary>
            Specifies a triangular cap that points both ends of each dash.
            </summary>
        </member>
        <member name="T:BaseLibS.Graph.IGraphics">
            <summary>
            This interface provides the abstract basis for graphics routines for different devices (window, pdf,
            etc). As such, graphics routines can be fully generalized and can be reused when exporting graphics
            to a file. The routines defined here are fully based on those from the C# class Graphics, in order
            to keep the routines legible.
            <p/>
            It is not intended to be complete
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.IGraphics.SmoothingMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.RotateTransform(System.Single)">
            <summary>
            Applies the specified rotation to the transformation matrix.
            </summary>
            <param name="angle">Angle of rotation in degrees.</param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.ScaleTransform(System.Single,System.Single)">
            <summary>
            Scales the drawing.
            </summary>
            <param name="sx">x-direction</param>
            <param name="sy">y-direction</param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.SetClippingMask(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the clipping-mask for the graphics device to draw in. This is required for applications which
            draw on a single canvas, where the normal grapics device draws in multiple controls. The origin (i.e.
            (0,0)) is moved to the given x and y position and the width and height is set to the new values. For
            file formats, this should have the effect that a new element is created in which all the graphics
            operations are located.
            </summary>
            <param name="width">The width of the clipping mask.</param>
            <param name="height">The height of the clipping mask.</param>
            <param name="x">The x-position of the clipping mask.</param>
            <param name="y">The y-position of the clipping mask.</param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.DrawLine(BaseLibS.Graph.Pen2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line connecting the two points specified by the coordinate pairs.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the line.</param>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the first point. </param>
            <param name="x2">The x-coordinate of the second point.</param>
            <param name="y2">The y-coordinate of the second point. </param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.DrawPath(BaseLibS.Graph.Pen2,BaseLibS.Graph.GraphicsPath2)">
            <summary>
            Draws a GraphicsPath.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the path.</param>
            <param name="path">GraphicsPath to draw.</param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.DrawEllipse(BaseLibS.Graph.Pen2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse defined by a bounding rectangle specified by coordinates for the upper-left corner of
            the rectangle, a height, and a width.
            </summary>
            <param name="pen">Pen that determines the color, width, and style of the ellipse.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.FillEllipse(BaseLibS.Graph.Brush2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a pair of coordinates, a width, and a height.
            </summary>
            <param name="brush">System.Drawing.Brush that determines the characteristics of the fill.</param>
            <param name="x">The x-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the bounding rectangle that defines the ellipse.</param>
            <param name="width">Width of the bounding rectangle that defines the ellipse.</param>
            <param name="height">Height of the bounding rectangle that defines the ellipse.</param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.DrawRectangle(BaseLibS.Graph.Pen2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="pen">Pen  that determines the color, width, and style of the rectangle.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">Width of the rectangle to draw.</param>
            <param name="height">Height of the rectangle to draw.</param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.FillRectangle(BaseLibS.Graph.Brush2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the interior of a rectangle specified by a pair of coordinates, a width, and a height.
            </summary>
            <param name="brush">Brush that determines the characteristics of the fill.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="width">Width of the rectangle to fill.</param>
            <param name="height">Height of the rectangle to fill.</param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.MeasureString(System.String,BaseLibS.Graph.Font2)">
            <summary>
            Measures the specified string when drawn with the specified Font.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.DrawString(System.String,BaseLibS.Graph.Font2,BaseLibS.Graph.Brush2,System.Single,System.Single)">
            <summary>
            Draws the specified text string at the specified location with the specified Brush and Font objects.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn text.</param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.DrawString(System.String,BaseLibS.Graph.Font2,BaseLibS.Graph.Brush2,BaseLibS.Graph.Rectangle2,BaseLibS.Graph.StringFormat2)">
            <summary>
            Draws the specified text string at the specified location with the specified Brush and Font objects.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">Font that defines the text format of the string.</param>
            <param name="brush">Brush that determines the color and texture of the drawn text.</param>
            <param name="rectangleF">System.Drawing.RectangleF structure that specifies the location of the drawn text.</param>
            <param name="format">System.Drawing.StringFormat that specifies formatting attributes, such as line 
            spacing and alignment, that are applied to the drawn text.</param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.DrawImage(BaseLibS.Graph.Bitmap2,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified Image at the specified location and with the specified size.
            </summary>
            <param name="image">Image to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="width">Width of the drawn image.</param>
            <param name="height">Height of the drawn image.</param>
        </member>
        <member name="M:BaseLibS.Graph.IGraphics.DrawImageUnscaled(BaseLibS.Graph.Bitmap2,System.Single,System.Single)">
            <summary>
            Draws the specified image using its original physical size at the location specified by a coordinate pair.
            </summary>
            <param name="image">Image to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
        </member>
        <member name="P:BaseLibS.Graph.Pen2.DashOffset">
            <summary>
            Gets or sets the distance from the start of a line to the beginning of a dash pattern.
            Returns the distance from the start of a line to the beginning of a dash pattern. 
            </summary>
        </member>
        <member name="P:BaseLibS.Graph.Pen2.DashPattern">
            <summary>
            Gets or sets an array of custom dashes and spaces.
            Returns an array of real numbers that specifies the lengths of alternating dashes and 
            spaces in dashed lines. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BaseLibS.Graph.Point2.ToString" -->
        <member name="T:BaseLibS.Mol.LabelModification">
            <summary>
            A label modification has two ficitious molecules corresponding to the 
            missing/extra atoms in the labeled form (LabelingDiff1/LabelingDiff2).
            </summary>
        </member>
        <member name="M:BaseLibS.Mol.LabelModification.GetAminoAcidFromLabel(System.String)">
            <summary>
            Given string label, return corresponding AminoAcid object, or null for a terminal modiciation.
            </summary>
            <param name="label">string label, e.g. "DimethLys2"</param>
            <returns>AminoAcid object, or null for a terminal modiciation</returns>
        </member>
        <member name="T:BaseLibS.Mol.EnzymeMode">
            <summary>
            One of Specific, SemispecificFreeNterm, SemispecificFreeCterm, Semispecific, or Unspecific.
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.Modification.DeltaMass">
            <summary>
            Monoisotopic mass
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.Modification.Unimod">
            <summary>
            Equivalent Unimod id
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.Modification.Position">
            <summary>
            Position of Modification
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.Modification.ModificationType">
            <summary>
            Determines if this is a standard modification, a label or an isobaric label, etc
            </summary>
        </member>
        <member name="M:BaseLibS.Mol.SequenceDatabase.#ctor">
            <summary>
            Default Constructor for Serialization. 
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.SequenceDatabase.Filename">
            <summary>
            The filename of this database e.g. as known by Andromeda.
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.SequenceDatabase.IdentifierParseRule">
            <summary>
            Regular expression which describes how to parse the fasta sequence header to 
            obtain the protein identifier.
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.SequenceDatabase.DescriptionParseRule">
            <summary>
            Regular expression which describes how to parse the fasta sequence header to 
            obtain the protein description.
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.SequenceDatabase.VariationParseRule">
            <summary>
            Regular expression which describes how to parse the fasta sequence header to 
            obtain the string containing definition of mutations.
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.SequenceDatabase.ModificationParseRule">
            <summary>
            Regular expression which describes how to parse the fasta sequence header to 
            obtain the string containing definition of modifications.
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.SequenceDatabase.TaxonomyParseRule">
            <summary>
            Regular expression which describes how to parse the fasta sequence header to 
            obtain the string containing definition of taxonomies.
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.SequenceDatabase.Species">
            <summary>
            The human readable species of this database which should be the NCBI entry name
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.SequenceDatabase.Taxid">
            <summary>
            The NCBI/NEWT taxonomy id for the species of this database
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.SequenceDatabase.Source">
            <summary>
            Origin of this fasta file
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.StorableItem.Name">
            <summary>
            Unique title of the item
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.StorableItem.Description">
            <summary>
            Description or full name of the item
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.StorableItem.CreationDate">
            <summary>
            Date of creation
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.StorableItem.ModifiedDate">
            <summary>
            Date of last modification.
            </summary>
        </member>
        <member name="P:BaseLibS.Mol.StorableItem.User">
            <summary>
            Name of the user who last modified the entry.
            </summary>
        </member>
        <member name="T:BaseLibS.Data.NeighbourList">
            <summary>
            Graph structure based on dictionaries of node neighbors.
            </summary>
        </member>
        <member name="M:BaseLibS.Data.NeighbourList.GetClusterAt(System.Int32)">
            <summary>
            Get connected component and remove it from NeighbourList
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Data.NeighbourList.GetAllClusters">
            <summary>
            Get all connected components
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Data.NeighbourList.GetClusterAtNoRemove(System.Int32)">
            <summary>
            Get connected component at node i
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:BaseLibS.Ms.InfoLists">
            <summary>
            Fields, other than allMassRanges, are Ms1Lists, SimLists, and Ms2Lists, only one of which 
            is actually given values, depending on the value of scanInfo.msLevel.
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.InfoLists.#ctor">
            <summary>
            Constructor does not set any data, except passing the firstScanNumber arg to the SimLists constructor.
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.InfoLists.Add(BaseLibS.Ms.ScanInfo,System.Int32)">
            <summary>
            Take the ScanInfo object and add its contents to the field simLists, ms1Lists, or ms2Lists, 
            depending on the values of the msLevel and isSim fields of the ScanInfo.
            </summary>
            <param name="scanInfo">an object containing details about this scan</param>
            <param name="scanNum">the unique number of this scan</param>
        </member>
        <member name="T:BaseLibS.Ms.MassGridInfo">
            <summary>
            Only field is an array of double deltaM. Not used yet (2014-04-01), 
            but will be soon. (See also field NeedsGrid of class RawFile.)
            </summary>
        </member>
        <member name="T:BaseLibS.Ms.RawFile">
            <summary>
            Contains data extracted from a raw data file. Implementations are vender dependent. Essentially 
            contains two RawFileLayer instances, one for positive ions and one for negative ions.
            </summary>
        </member>
        <member name="F:BaseLibS.Ms.RawFile.indexVersion">
            <summary>
            Counter incremented when format used for index files is changed, to avoid using stale index files.
            </summary>
        </member>
        <member name="F:BaseLibS.Ms.RawFile.path">
            <summary>
            Backing field to the Path property.
            </summary>
        </member>
        <member name="F:BaseLibS.Ms.RawFile.preInitialized">
            <summary>
            Ensures that method PreInit is only called once.
            </summary>
        </member>
        <member name="F:BaseLibS.Ms.RawFile.posLayer">
            <summary>
            The RawFileLayer for positive ions.
            </summary>
        </member>
        <member name="F:BaseLibS.Ms.RawFile.negLayer">
            <summary>
            The RawFileLayer for negative ions.
            </summary>
        </member>
        <member name="F:BaseLibS.Ms.RawFile.gridInfo">
            <summary>
            Not used yet (2014-04-01), but will be soon.
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.RawFile.PreInit">
            <summary>
            In the implementations, several methods start with the block if (!preInitialized){ PreInit(); }, 
            and this method normally ends with the statement preInitialized = true;
            </summary>
        </member>
        <member name="P:BaseLibS.Ms.RawFile.Suffix">
            <summary>
            The case-insensitive suffix of the raw data files, e.g., .d, .mzxml, .wiff, or .raw.
            Please specify in lower case.
            </summary>
        </member>
        <member name="P:BaseLibS.Ms.RawFile.IsFolderBased">
            <summary>
            True if the path to a raw data set should be a folder (directory); false if it should be a simple file.
            </summary>
        </member>
        <member name="P:BaseLibS.Ms.RawFile.DefaultInstrument">
            <summary>
            Every raw data implementation has its own implementation of MsInstrument.
            </summary>
        </member>
        <member name="P:BaseLibS.Ms.RawFile.IsInstalled">
            <summary>
            A self-contained raw file reader will simply return true, but some readers depend on external programs,
            and these will only return true if those programs are also installed. At this time, the most important 
            dependence of this kind is the dependence of Thermo on MSFileReader. This is only checked when new raw
            data sources are being loaded.
            </summary>
        </member>
        <member name="P:BaseLibS.Ms.RawFile.InstallMessage">
            <summary>
            The message to be returned if a required RawFile class is not completely installed.
            </summary>
        </member>
        <member name="P:BaseLibS.Ms.RawFile.FirstScanNumber">
            <summary>
            First scan in iteration over all scan numbers in InitFromRawFileImpl.
            </summary>
        </member>
        <member name="P:BaseLibS.Ms.RawFile.LastScanNumber">
            <summary>
            Last scan in iteration over all scan numbers in InitFromRawFileImpl.
            </summary>
        </member>
        <member name="P:BaseLibS.Ms.RawFile.Ms1Count">
            <summary>
            Sum of Ms1Count from the two layers. No usages found!
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.RawFile.IsSuitableFile(System.String)">
            <summary>
            Default implementation does nothing more than to call PathIsValid, which examines three conditions:
            (1) the path exists, (2) it is a file or folder as expected by IsFolderBased, and (3) it ends with
            the string given in Suffix. When this is not sufficient to distinguish every vendor, this method
            must be overridden in the concrete implementations. In particular, raw data from both Agilent and
            Bruker is stored in folders with the suffix .d, so AgilentRawFile overrides this method to check for
            the existence of a subdirectory named AcqData, and BrukerRawFileSqlite checks for the existence of
            a file named analysis.baf. Used only by FindSuitableTemplate.
            </summary>
            <param name="path1"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Ms.RawFile.PathIsValid(System.String)">
            <summary>
            Examines argument to determine if it has the characteristics expected of a valid raw data file or folder.
            true is returned if and only if three conditions are met: (1) the path exists, (2) it is a file or folder
            as expected by IsFolderBased, and (3) it ends with the string given in Suffix. Used only by IsSuitableFile,
            which may be overridden to remove ambiguity between some pairs of vendors.
            </summary>
            <param name="path1">path to be examined</param>
            <returns>true if the argument looks like a raw data file or folder of the right type, false otherwise</returns>
        </member>
        <member name="M:BaseLibS.Ms.RawFile.GetInfoForScanNumber(System.Int32)">
            <summary>
            Create a ScanInfo object with information on the scan with the given number.
            </summary>
            <param name="scanNumber"></param>
            <returns></returns>
        </member>
        <member name="P:BaseLibS.Ms.RawFile.Path">
            <summary>
            Path to the raw data file in proprietary format. Value is set immediately after creation 
            of the RawFile and is never modified. It is used in the RawFile* implementations of the
            abstract class RawFile.
            </summary>
        </member>
        <member name="P:BaseLibS.Ms.RawFile.IndexFilename">
            <summary>
            From the name of the raw data file of this RawFile, create the name of the corresponding 
            index file by changing the suffix to "index". (Immutable, since Path can only be set once.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Ms.RawFile.Init(System.String)">
            <summary>
            Called only by CreateRawFile. Mostly just calls InitFromRawFile.
            </summary>
            <param name="path1">Path to a file containing raw data in a proprietary format.</param>
        </member>
        <member name="M:BaseLibS.Ms.RawFile.InitFromRawFile">
            <summary>
            Call InitFromRawFileImpl and, if appropriate, PreInit and InitMassGrid. 
            Only called from Init, which is only called from CreateRawFile.
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.RawFile.InitFromRawFileImpl">
            <summary>
            Extract ScanInfo from this RawFile for each scan and add it to the posLayer or negLayer RawFileLayer of this RawFile.
            
            Only called from InitFromRawFile, which is called only from Init, which is only called from CreateRawFile.
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.RawFile.WriteIndex">
            <summary>
            Write indexVersion, Application.ProductVersion, posLayer, negLayer, and (if NeedsGrid) gridInfo to IndexFilename.
            Called only from Init, which is called only from CreateRawFile.
            The corresponding read method is ReadIndex.
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.RawFile.IndexVersionIsCurrent">
            <summary>
            Whether the pre-existing index file has the format of the current version of the software.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Ms.RawFile.ReadIndex">
            <summary>
            Set posLayer, negLayer, and (if NeedsGrid) gridInfo from IndexFilename.
            The work is done by RawFileLayer(reader, this) and MassGridInfo(reader).
            Called only from Init, which is called only from CreateRawFile.
            The corresponding write method is WriteIndex.
            </summary>
        </member>
        <member name="T:BaseLibS.Ms.RawFileLayer">
            <summary>
            A "layer" is the information of a raw data file for only the positive or only the negative ions.
            </summary>
        </member>
        <member name="T:BaseLibS.Ms.RawFileUtils">
            <summary>
            A collection of static methods to manipulate RawFiles.
            </summary>
        </member>
        <member name="T:BaseLibS.Ms.ScanInfo">
            <summary>
            A collection of fields describing a scan. Information on scans is set in a device-dependent way.
            </summary>
        </member>
        <member name="T:BaseLibS.Ms.SignalType">
            <summary>
            Either Centroid or Profile. Centroid means that a Spectrum delivered by a spectrometer 
            is a list of masses at which a peak was found, together with the intensities of those peaks.
            Profile means that the masses are more or less evenly and closely spaced, so that the positions 
            and the intensities of the peaks must first be extracted.
            </summary>
        </member>
        <member name="T:BaseLibS.Ms.Spectrum">
            <summary>
            A simple object containing a vector of masses and corresponding intensities, 
            with simple manipulation methods.
            </summary>
        </member>
        <member name="P:BaseLibS.Ms.Spectrum.Count">
            <summary>
            Number of mass/intensity pairs.
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.Spectrum.GetCeilIndex(System.Double)">
            <summary>
            smallest index of masses for which masses[index] is greater than or equal to mass
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.Spectrum.GetFloorIndex(System.Double)">
            <summary>
            largest index of masses for which masses[index] is less than or equal to mass
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.Spectrum.GetIntensity(System.Int32)">
            <summary>
            Get intensity as a function of index.
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.Spectrum.IsMax(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Is a itself local maximum or the right-most of two points making a local maximum.
            </summary>
            <param name="x">Intensity at the index in question.</param>
            <param name="m1">Intensity at that index minus 1.</param>
            <param name="p1">Intensity at that index plus 1.</param>
            <param name="m2">Intensity at that index minus 2.</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Ms.Spectrum.CalcMinPeakIndex(System.Int32)">
            <summary>
            Move to the left as long as the next point is strictly lower than the current one but not zero.
            </summary>
        </member>
        <member name="M:BaseLibS.Ms.Spectrum.CalcMaxPeakIndex(System.Int32)">
            <summary>
            Move to the right as long as the next point is strictly lower than the current one but not zero.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.ByteArray.endianBig">
            <summary>The data is stored in big endian mode.</summary>
        </member>
        <member name="F:BaseLibS.Num.ByteArray.endianLittle">
            <summary>The data is stored in little endian mode.</summary>
        </member>
        <member name="M:BaseLibS.Num.ByteArray.ToDoubleArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a byte array containing double-values into a double array. The
            given value for endiannes (either {@link ByteArray#EndianBig} or
            {@link ByteArray#EndianLittle}) indicates the byte-order the data has been
            stored in. The precision indicates the number of bits for each element
            in the double array.
            </summary>
            <param name="array">The byte-array to be converted.</param>
            <param name="endiannes">The byte-order in which the data has been stored (either <see cref="F:BaseLibS.Num.ByteArray.endianLittle"/> or <see cref="F:BaseLibS.Num.ByteArray.endianBig"/>).</param>
            <param name="precision">The number of bits for each element in the double-array.</param>
            <returns>The array with the double-values.</returns>
        </member>
        <member name="T:BaseLibS.Num.Cluster.HierarchicalClustering">
            <summary>
            Static class containing utility routines for hierarchical clustering.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Cluster.HierarchicalClustering.TreeCluster(BaseLibS.Num.Matrix.MatrixIndexer,BaseLibS.Api.MatrixAccess,BaseLibS.Api.IDistance,BaseLibS.Num.Cluster.HierarchicalClusterLinkage,System.Boolean,System.Boolean,System.Int32,System.Action{System.Int32})">
            <summary>
            Performs a hierarchical clustering on the the given data matrix.
            </summary>
            <param name="data">Data matrix that is going to be clustered.</param>
            <param name="access">Specifies whether rows or columns are to be clustered</param>
            <param name="distance">Defines the distance between two elements</param>
            <param name="linkage">Specifies the linkage for the clustering.</param>
            <param name="preserveOrder"></param>
            <param name="periodic"></param>
            <param name="nthreads"></param>
            <param name="progress"></param>
            <returns>An array of cluster nodes defining the resulting tree.</returns>
        </member>
        <member name="M:BaseLibS.Num.Cluster.HierarchicalClustering.TreeCluster(BaseLibS.Num.Matrix.MatrixIndexer,BaseLibS.Num.Cluster.HierarchicalClusterLinkage,System.Boolean,System.Boolean,System.Int32,System.Action{System.Int32})">
            <summary>
            Performs hierarchical clustering based on a matrix of distances.
            </summary>
            <param name="distMatrix">The matrix of distances. It is lower triangular, excluding the diagonal.</param>
            <param name="linkage">Specifies the linkage for the clustering.</param>
            <param name="preserveOrder"></param>
            <param name="periodic"></param>
            <param name="nthreads"></param>
            <param name="progress"></param>
            <returns>An array of cluster nodes defining the resulting tree.</returns>
        </member>
        <member name="M:BaseLibS.Num.Cluster.HierarchicalClustering.CalcTree(BaseLibS.Num.Cluster.HierarchicalClusterNode[],System.Int32[]@,System.Int32[]@,System.Int32[]@,System.Int32[]@,System.Int32[]@)">
            <param name="nodes">The cluster nodes serve as input here.</param>
        </member>
        <member name="T:BaseLibS.Num.Cluster.HierarchicalClusterLinkage">
            <summary>
            Encodes linkages used for hierarchical clustering.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Cluster.HierarchicalClusterNode.distance">
            <summary>
            The distance between the two children.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Cluster.HierarchicalClusterNode.left">
            <summary>
            The id of the left child. If it is >=0, it means the left child is an original 
            data point and the value is its index. When negative the left child is the <c>-left-1</c>
            entry in the cluster node list.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Cluster.HierarchicalClusterNode.right">
            <summary>
            The id of the right child. If it is >=0, it means the right child is an original 
            data point and the value is its index. When negative the right child is the <c>-right-1</c>
            entry in the cluster node list.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Cluster.HierarchicalClusterNode.FromRFormat(System.Int32[],System.Int32[],System.Double[])">
            <summary>
            Utility format for reading clustering results from R.
            </summary>
            <param name="left">first column of <code>hclust$merge</code></param>
            <param name="right">second column of <code>hclust$merge</code></param>
            <param name="distance"><code>hclust$height</code></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.Cluster.KmeansClustering.GenerateClusters(BaseLibS.Num.Matrix.MatrixIndexer,System.Int32,System.Int32,System.Int32,System.Action{System.Int32},System.Single[0:,0:]@,System.Int32[]@)">
            <summary>
            Run k-means clustering
            </summary>
            <param name="data"></param>
            <param name="k">number of clusters</param>
            <param name="maxIter">maximal number of iterations, if not converging</param>
            <param name="restarts"></param>
            <param name="progress"></param>
            <param name="clusterCenters"></param>
            <param name="clusterIndices"></param>
        </member>
        <member name="M:BaseLibS.Num.Cluster.KmedoidClustering.GenerateClusters(BaseLibS.Num.Matrix.MatrixIndexer,BaseLibS.Api.IDistance,System.Int32)">
            <summary>
            Run K-medoid clustering.
            </summary>
            <param name="data">data matrix with n rows</param>
            <param name="distance"></param>
            <param name="k">number of clusters k &lt; n</param>
            <returns>Array of length n. <code>assignment[i]</code> returns the index of the cluster medoid in the data matrix.</returns>
        </member>
        <member name="M:BaseLibS.Num.Cluster.KmedoidClustering.GenerateClusters(BaseLibS.Num.Matrix.MatrixIndexer,BaseLibS.Api.IDistanceMatrix,System.Int32)">
            <summary>
            Run K-medoid clustering.
            </summary>
            <param name="data">data matrix with n rows</param>
            <param name="distance"></param>
            <param name="k">number of clusters k &lt; n</param>
            <returns>Array of length n. <code>assignment[i]</code> returns the index of the cluster medoid in the data matrix.</returns>
        </member>
        <member name="M:BaseLibS.Num.Func.IncompleteBeta.Value(System.Double,System.Double,System.Double)">
            <summary>
            Approximates the the incomplete beta function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns>Returns the incomplete beta function value.</returns>
        </member>
        <member name="M:BaseLibS.Num.Func.IncompleteBeta.Betacf(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the continued fraction used for the approximation of the incomplete beta function.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Func.Gamma.LnValue(System.Double)">
            <summary>
            Approximation to the natural logarithm of the gamma function.
            </summary>
            <param name="xx">The argument is required to be positive.</param>
            <returns>Ln of the gamma function value.</returns>
        </member>
        <member name="P:BaseLibS.Num.Matrix.MatrixIndexer.Item(System.Int32,System.Int32)">
            <summary>
            uncheked
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Matrix.MatrixIndexer.Get(System.Int32,System.Int32)">
            <summary>
            checked
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Matrix.MatrixIndexer.Set(System.Int32,System.Int32,System.Double)">
            <summary>
            checked
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Matrix.MatrixIndexer.ContainsNaNOrInf">
            <summary>
            True if at least one entry is NaN or Infinity.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Matrix.MatrixIndexer.IsNanOrInfRow(System.Int32)">
            <summary>
            True if all entries are NaN or Infinity in that row.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Matrix.MatrixIndexer.IsNanOrInfColumn(System.Int32)">
            <summary>
            True if all entries are NaN or Infinity in that column.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.CubicSpline.#ctor(System.Double[],System.Double[],System.Double,System.Double)">
            <param name="x">x values</param>
            <param name="y">y values</param>
            <param name="yp1">derivative at <code>x[0]</code> </param>
            <param name="ypn">derivative at <code>x[x.Length - 1]</code> </param>
        </member>
        <member name="M:BaseLibS.Num.CubicSpline.Interpolate(System.Double)">
            <summary>
            Be aware that the function is assumed to be constant outside of the range of x values. That means in particular that
            the functio is not differentiable at x[0] and x[n-1].
            </summary>
        </member>
        <member name="T:BaseLibS.Num.MatrixUtils">
            <summary>
            A collection of primitive operation on matrices.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.NumUtils.GetPartitions(System.Int32,System.Int32)">
            <summary>
            Creates all partitions of exactly <code>nItems</code> items into <code>nClasses</code> classes. 
            </summary>
            <param name="nItems">Number of items to be distributed into the classes.</param>
            <param name="nClasses">Number of classes</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.NumUtils.GetPartitions(System.Int32,System.Int32,System.Func{System.Int32[],System.Boolean},System.Action{System.Int32[]})">
            <summary>
            Creates all partitions of exactly <code>nItems</code> items into <code>nClasses</code> classes. 
            </summary>
            <param name="nItems">Number of items to be distributed into the classes</param>
            <param name="nClasses">Number of classes</param>
            <param name="validPartition">Here you can add a criterion for the partition to be valid.</param>
            <param name="task">If <code>task != null</code> this action will be performed on all valid partitions. 
            In that case the return value will be <code>null</code>.</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.NumUtils.Medfit(System.Double[],System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits y = a + b * x by the criterion of least absolute deviations.
            </summary>
            <param name="x">The input x values.</param>
            <param name="y">The input y values.</param>
            <param name="a">Fitted offset parameter.</param>
            <param name="b">Fitted slope parameter.</param>
            <param name="abdev">absolute deviation in y of 
            the experimental points from the fitted line.</param>
        </member>
        <member name="M:BaseLibS.Num.NumUtils.DiagonalizeSymmMatrix(System.Double[0:,0:],System.Double[0:,0:]@)">
            <param name="m">Symmetrical input matrix.</param>
            <param name="evec">The matrix of eigenvectors. The second index iterates through the different eigenvectors.</param>
            <returns>Vector of eigenvalues in no particular order.</returns>
        </member>
        <member name="M:BaseLibS.Num.NumUtils.Pythag(System.Double,System.Double)">
            <summary>
            Computes (a^2+b^2)^1/2 without underflow or overflow.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.NumUtils.Erff(System.Double)">
            <summary>
            Returns the error function erf(x)
            </summary>
        </member>
        <member name="M:BaseLibS.Num.NumUtils.Erffc(System.Double)">
            <summary>
            Returns the complementary error function erfc(x) = 1 - erf(x)
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.NumUtils.Gammp(System.Double,System.Double)">
            <summary>
            Returns the incomplete gamma function P(a,x)
            </summary>
        </member>
        <member name="M:BaseLibS.Num.NumUtils.Gammq(System.Double,System.Double)">
            <summary>
            Returns the incomplete gamma function Q(a,x) = 1 - P(a,x)
            </summary>
        </member>
        <member name="M:BaseLibS.Num.NumUtils.Rank(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Returns the sample ranks of the values in a array. Ties (i.e., equal values) are handled . in "average" way.
            </summary>
            <param name="x">Numeric List object</param>
            <param name="sumDuplicates">Arrays of number elements in each ties group. Important for test correction</param>
            <returns>Rank array</returns>
        </member>
        <member name="T:BaseLibS.Num.Random2">
            <summary>
            Class containing utility methods for generating pseudo random numbers.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Random2.random">
            <summary>
            Intrinsic random number generator used for samping from uniform distribion.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Random2.iset">
            <summary>
            Temporary store needed for generating Gaussian random numbers.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Random2.gset">
            <summary>
            Temporary store needed for generating Gaussian random numbers.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Random2.#ctor(System.Int32,BaseLibS.Num.RandomType)">
            <summary>
            Initializes a new instance of the Random class, using the specified seed value.
            </summary>
            <param name="seed">A number used to calculate a starting value for the pseudo-random number 
            sequence. If a negative number is specified, the absolute value of the number is used.</param>
            <param name="type"></param>
        </member>
        <member name="M:BaseLibS.Num.Random2.NextDouble">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.
            </summary>
            <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:BaseLibS.Num.Random2.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. 
            maxValue must be greater than or equal to minValue.</param>
            <returns>A 32-bit signed integer greater than or equal to minValue and less than maxValue; 
            that is, the range of return values includes minValue but not maxValue. If minValue equals 
            maxValue, minValue is returned.</returns>
        </member>
        <member name="M:BaseLibS.Num.Random2.Next(System.Int32)">
            <summary>
            Returns a non-negative random integer that is less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. 
            maxValue must be greater than or equal to 0.</param>
            <returns>A 32-bit signed integer that is greater than or equal to 0, and less than maxValue; 
            that is, the range of return values ordinarily includes 0 but not maxValue. However, if 
            maxValue equals 0, maxValue is returned.</returns>
        </member>
        <member name="M:BaseLibS.Num.Random2.NextGaussian">
            <summary>
            This method generates a pseudo random number drawn from a normal distribution
            with zero mean and unit variance.
            </summary>
            <returns> The Gaussian random number.</returns>
        </member>
        <member name="M:BaseLibS.Num.Random2.NextRange(System.Double,System.Double)">
            <summary>
            Returns a random number uniformly distributed between min and max;
            </summary>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.Random2.NextGaussian(System.Double,System.Double)">
            <summary>
            This method generates a pseudo random number drawn from a normal distribution
            with the given mean and standard deviation.
            </summary>
            <returns> The Gaussian random number.</returns>
        </member>
        <member name="M:BaseLibS.Num.Random2.NextBinomial(System.Int32,System.Double)">
            <summary>
            This routine generates a random number between 0 and n inclusive,
            following the binomial distribution with probability p and n trials. The
            routine is based on the BTPE algorithm, described in:
            
            Voratas Kachitvichyanukul and Bruce W. Schmeiser: Binomial Random Variate
            Generation Communications of the ACM, Volume 31, Number 2, February 1988,
            pages 216-222.
            
            </summary>
            <param name="n">The number of trials.</param>
            <param name="p">The probability of a single event. This probability should be less than or equal to 0.5.</param>
            <returns>An integer drawn from a binomial distribution with parameters (p, n).</returns>
        </member>
        <member name="M:BaseLibS.Num.Random2.NextPermutation(System.Int32)">
            <summary>
            Produces a random permutation of the integers from 0 to n-1.
            </summary>
            <param name="n">The length of the vector of permuted integers.</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.Random2.NextCrossValidationIndices(System.Int32,System.Int32,System.Int32[][]@,System.Int32[][]@)">
            <summary>
            Returns randomized training and test set indices for n-fold cross
            validation.
            </summary>
            <param name="n">The number of items the cross validation will be performed on.</param>
            <param name="nfold">The number of cross validation folds.</param>
            <param name="train">Contains on output <c>nfold</c> vectors of integers filled with the 
            indices of the training set for the particular fold.</param>
            <param name="test">Contains on output <c>nfold</c> vectors of integers filled with the 
            indices of the test set for the particular fold.</param>
        </member>
        <member name="M:BaseLibS.Num.Random2.Binomial(System.Int32,System.Double)">
            <summary>
            Method doing the actual work of drawing from a binomial distribution.
            </summary>
            <param name="n">The number of trials.</param>
            <param name="p">The probability of a single event. This probability should be less than or equal to 0.5.</param>
            <returns>An integer drawn from a binomial distribution with parameters (p, n).</returns>
        </member>
        <member name="M:BaseLibS.Num.Random2.Multinomial(System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            This function generates a vector of random variates from a multinomial distribution.
            </summary>
            <param name="source">An input array containing the probability or fraction of each color in the urn.</param>
            <param name="n">The number of balls drawn from the urn.</param>
            <param name="colors">The number of possible colors.</param>
            <returns>The number of balls of each color.</returns>
        </member>
        <member name="M:BaseLibS.Num.Test.FisherExactTest.Test(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            P-value calculation from q_xy of the contingency table. See <see cref="M:BaseLibS.Num.Test.FisherExactTest.GetLogFisherP(System.Int32,System.Int32,System.Int32,System.Int32)"/> for log p-value
            and <see cref="M:BaseLibS.Num.Test.FisherExactTest.CalcContingency(System.Boolean[],System.Boolean[],System.Int32@,System.Int32@,System.Int32@,System.Int32@)"/> for calculating the contingency table.
            </summary>
            <param name="q00"></param>
            <param name="q01"></param>
            <param name="q10"></param>
            <param name="q11"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.Test.FisherExactTest.Test(System.Boolean[],System.Boolean[])">
            <summary>
            Calculate contingency table and p-value, see <see cref="M:BaseLibS.Num.Test.FisherExactTest.CalcContingency(System.Boolean[],System.Boolean[],System.Int32@,System.Int32@,System.Int32@,System.Int32@)"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.Test.FisherExactTest.GetLogFisherP(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Log p-value calculation from q_xy of the contingency table.
            </summary>
            <param name="q00"></param>
            <param name="q01"></param>
            <param name="q10"></param>
            <param name="q11"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.Test.FisherExactTest.CalcContingency(System.Boolean[],System.Boolean[],System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Calculate all 4 counts of the 2x2 contingency table.
            Count for (x,y) in (xs, ys):
                    |y=True |y=False|
            |x=True |  r00  |  r10  |
            |x=False|  r01  |  r11  |
            </summary>
            <param name="xs"></param>
            <param name="ys"></param>
            <param name="r00"></param>
            <param name="r01"></param>
            <param name="r10"></param>
            <param name="r11"></param>
        </member>
        <member name="M:BaseLibS.Num.Test.FisherExactTest.CalcContingencyTable(System.Boolean[],System.Boolean[])">
            <summary>
            Calculate all 4 counts of the 2x2 contingency table.
            Count for (x,y) in (xs, ys):
                    |y=True |y=False|
            |x=True |  r00  |  r10  |
            |x=False|  r01  |  r11  |
            </summary>
            <param name="xs"></param>
            <param name="ys"></param>
        </member>
        <member name="M:BaseLibS.Num.Test.PermBasedFdrUtil.BalancedPermutationsSubgroups(System.Int32[][][],System.Int32[][]@,BaseLibS.Num.Random2)">
            <summary>
            Creates permutations of group memberships of data points while preserving subgroup structures. 
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Test.PermBasedFdrUtil.BalancedPermutations(System.Int32[][],System.Int32[][]@,BaseLibS.Num.Random2)">
            <summary>
            Creates permutations of group memberships of data points. 
            </summary>
            <param name="inds">Original group memberships. Length = number of groups. Each sub-array contains indices 
            of original group members.</param>
            <param name="indsOut">Scrambled groups</param>
            <param name="r2">Random number generator used for creating the permutations</param>
        </member>
        <member name="M:BaseLibS.Num.Test.Univariate.NSample.KruskalWallisTest.TestImpl(System.Double[][],System.Double@)">
            <summary>
            Kruskal Wallis test is the extention of the Wilcoxon U test to more than two group
            Another words it is designed to test the equakity of medians of multiple sample
            </summary>
            <param name="data">Value of the first dimension is number of groups, second - size of the group</param>
            <param name="stat">H-statistic of the test</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.Dot(BaseLibS.Num.Vector.BaseVector)">
            <summary>
            Determines the scalar product of this vector with another one passed as the argument. 
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.Mult(System.Double)">
            <summary>
            Multiplication with a scalar.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.Copy">
            <summary>
            Produces a deep copy of this vector.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.Minus(BaseLibS.Num.Vector.BaseVector)">
            <summary>
            Calculates this vector minus the other.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.Plus(BaseLibS.Num.Vector.BaseVector)">
            <summary>
            Calculates this vector plus the other.
            </summary>
        </member>
        <member name="P:BaseLibS.Num.Vector.BaseVector.Length">
            <summary>
            Number of elements in this vector.
            </summary>
        </member>
        <member name="P:BaseLibS.Num.Vector.BaseVector.Item(System.Int32)">
            <summary>
            Indexer to the elements of this vector.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.SumSquaredDiffs(BaseLibS.Num.Vector.BaseVector)">
            <summary>
            Determines the sum of squared differences of this vector with another one passed as the argument. 
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.SubArray(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Creates a new vector containing the elements that are indexed by the input array.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.ContainsNaNOrInf">
            <summary>
            True if at least one entry is NaN or Infinity.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.IsNaNOrInf">
            <summary>
            True if all entries are NaN or Infinity.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.Unpack">
            <summary>
            Unpack the vector elements sinto a double array.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting resources.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.Vector.BaseVector.Clone">
            <summary>
            Produces a deep copy of this vector.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Vector.BoolArrayVector.values">
            <summary>
            These boolean values are encoding 0 and 1 values.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Vector.SparseBoolVector.indices">
            <summary>
            Indices of elements with value 1. Values not covered by the indices are 0. Indices are sorted.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Vector.SparseBoolVector.length">
            <summary>
            Total length of the vector.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Vector.SparseFloatVector.indices">
            <summary>
            Indices of nonzero elements. Indices are sorted.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Vector.SparseFloatVector.values">
            <summary>
            Values at the positions specified by the <code>indices</code> array.
            </summary>
        </member>
        <member name="F:BaseLibS.Num.Vector.SparseFloatVector.length">
            <summary>
            Total length of the vector.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Min(System.Collections.Generic.IList{System.Double})">
            <summary>
                Determines the smallest number in the input array.
            </summary>
            <param name="x">The input array. It may contain NaN and infinity values.</param>
            <returns>The minimum.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Min(System.Collections.Generic.IList{System.Single})">
            <summary>
                Determines the smallest number in the input array.
            </summary>
            <param name="x">The input array. It may contain NaN and infinity values.</param>
            <returns>The minimum.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Min(System.Collections.Generic.IList{System.Byte})">
            <summary>
                Determines the smallest number in the input array.
            </summary>
            <param name="x">The input array.</param>
            <returns>The minimum.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Max(System.Collections.Generic.IList{System.Double})">
            <summary>
                Determines the biggest number in the input array.
            </summary>
            <param name="x">The input array. It may contain NaN and infinity values.</param>
            <returns>The maximum.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Max(System.Collections.Generic.IList{System.Single})">
            <summary>
                Determines the biggest number in the input array.
            </summary>
            <param name="x">The input array. It may contain NaN and infinity values.</param>
            <returns>The maximum.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Max(System.Collections.Generic.IList{System.Byte})">
            <summary>
                Determines the biggest number in the input array.
            </summary>
            <param name="x">The input array.</param>
            <returns>The maximum.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Max(System.Collections.Generic.IList{System.Int64})">
            <summary>
                Determines the biggest number in the input array.
            </summary>
            <param name="x">The input array.</param>
            <returns>The maximum.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Max(System.Collections.Generic.IList{System.Int16})">
            <summary>
                Determines the biggest number in the input array.
            </summary>
            <param name="x">The input array.</param>
            <returns>The maximum.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Complement(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Set of all ints in [0, length] not contained in present
            </summary>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Complement(System.Collections.Generic.HashSet{System.Int32},System.Int32)">
            <summary>
            Set of all ints in [0, length] not contained in present
            </summary>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SubList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Create a sublist by indexing with an indicator. If the indicator is longer than the values,
            superfluous entries will be ignored.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="indicator"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SubList``1(System.Collections.Generic.IList{``0},System.Int32[])">
            <summary>
            Create a sublist by extracting all provided indices.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.ConsecutiveInts(System.Int32,System.Int32)">
            <summary>
                Create a list of consecutive integers.
            </summary>
            <param name="from">Start index.</param>
            <param name="to">End (exclusive).</param>
            <returns>The list of consecutive integers.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.ConsecutiveShorts(System.Int32,System.Int32)">
            <summary>
                Create a list of consecutive shorts.
            </summary>
            <param name="from">Start index.</param>
            <param name="to">End (exclusive).</param>
            <returns>The list of consecutive integers.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.ConsecutiveLongs(System.Int64,System.Int64)">
            <summary>
                Create a list of consecutive longs.
            </summary>
            <param name="from">Start index.</param>
            <param name="to">End (exclusive).</param>
            <returns>The list of consecutive longs.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SubArray``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Int32})">
            <summary>
                Extracts the indexed elements from the given array.
            </summary>
            <typeparam name="T">Arbitrary type of the array elements.</typeparam>
            <param name="array">The input array.</param>
            <param name="indices">Indices of the elements to be extracted.</param>
            <returns>
                An array containing the elements of the input array indexed by the <code>indices</code> array.
            </returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SubArray``1(``0[],System.Int32)">
            <summary>
                Extracts the first <code>len</code> elements from the input array.
            </summary>
            <typeparam name="T">Arbitrary type of the array elements.</typeparam>
            <param name="array">The input array.</param>
            <param name="len">Length of the output array.</param>
            <returns>
                The first <code>len</code> elements of the input array.
            </returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SubArrayFrom``1(``0[],System.Int32)">
            <summary>
                Extracts the subarrry from the position <code>startPos</code> on.
            </summary>
            <typeparam name="T">Arbitrary type of the array elements.</typeparam>
            <param name="array">The input array.</param>
            <param name="startPos">Start position of the output array.</param>
            <returns>
                The subarrry from the position <code>startPos</code> on.
            </returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SubArray``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Extracts the subarray from the position <code>startIndex</code> to the position <code>stopIndex</code> (exclusive).
            </summary>
            <typeparam name="T">Arbitrary type of the array elements.</typeparam>
            <param name="array">The input array.</param>
            <param name="startIndex">Start position of the output array.</param>
            <param name="stopIndex">Exclusive stop position of the output array.</param>
            <returns>The subarrry.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Order``1(System.Collections.Generic.IList{``0})">
            <summary>
                For the sake of simplicity do all sorting tasks always and ever with these method.
            </summary>
            <typeparam name="T">
                The array type has to inherit IComparable in order to have a
                criterion to sort on.
            </typeparam>
            <param name="x">The input data to be sorted.</param>
            <returns>
                An array of indices such that if x is accessed with those indices the values are in
                ascending (or to be more precise, non-decending) order.
            </returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Order``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
                For the sake of simplicity do all sorting tasks always and ever with these method.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T0"></typeparam>
            <param name="x">The input data to be sorted.</param>
            <param name="y">If the same, use this data to sort.</param>
            <returns>
                An array of indices such that if x is accessed with those indices the values are in
                ascending (or to be more precise, non-decending) order.
            </returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Order``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2})">
            <summary>
                For the sake of simplicity do all sorting tasks always and ever with these method.
            </summary>
            <typeparam name="T2"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T0"></typeparam>
            <param name="x">The input data to be sorted.</param>
            <param name="y">If the same, use this data to sort.</param>
            <returns>
                An array of indices such that if x is accessed with those indices the values are in
                ascending (or to be more precise, non-decending) order.
            </returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Order(BaseLibS.Num.Vector.BaseVector)">
            <summary>
                For the sake of simplicity do all sorting tasks always and ever with these method.
            </summary>
            <param name="x">The input data to be sorted.</param>
            <returns>
                An array of indices such that if x is accessed with those indices the values are in
                ascending (or to be more precise, non-decending) order.
            </returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SortImpl``1(System.Collections.Generic.IList{``0},System.Int32[],System.Int32[],System.Int32,System.Int32)">
            <summary>
                Private class that implements the sorting algorithm.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SortImpl``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Int32[],System.Int32[],System.Int32,System.Int32)">
            <summary>
                Private class that implements the sorting algorithm.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SortImpl``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Int32[],System.Int32[],System.Int32,System.Int32)">
            <summary>
                Private class that implements the sorting algorithm.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SortImpl(BaseLibS.Num.Vector.BaseVector,System.Int32[],System.Int32[],System.Int32,System.Int32)">
            <summary>
                Private class that implements the sorting algorithm.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Rank``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
                Calculates the rank of the given data. The lowest rank value is 0.
                The input array type must inherit IComparable.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Rank(BaseLibS.Num.Vector.BaseVector,System.Boolean)">
            <summary>
                Calculates the rank of the given data. The lowest rank value is 0.
                The input array type must inherit IComparable.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.RankF``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
                Calculates the rank of the given data. The lowest rank value is 0.
                The input array type must inherit IComparable.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.GetValues``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Returns an array containing all values from the given dictionary for which there is a key present in the key array.
            </summary>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.IndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                Returns the index of the first element in an array that equals a given object.
            </summary>
            <param name="p">Array to be searched.</param>
            <param name="q">Element to be found.</param>
            <returns>Index of first occurence. -1 otherwise.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.IndicesOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                Returns all indices of the array elements that equal a given object.
            </summary>
            <param name="p">Array to be searched.</param>
            <param name="q">Element to be found.</param>
            <returns>All indices of occurence.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.BinarySearchWithTies``1(``0[],``0,System.Int32@,System.Int32@)">
            <summary>
                In case the item is not in the array or occurs only once the conventional binary search output index
                is returned in <code>minInd</code> and <code>maxInd</code>. If the item occurs more than once,
                <code>minInd</code> and <code>maxInd</code> indicate the
                inclusive index interval for which the item occurs in the <code>array</code>.
            </summary>
            <typeparam name="T">
                Needs to be <code>IComparable</code>
            </typeparam>
            <param name="array">Sorted array, potentially with ties</param>
            <param name="value">Value to be searched for.</param>
            <param name="minInd">
                Outputs the minimum array index where <code>value</code> is found.
            </param>
            <param name="maxInd">
                Outputs the inclusive maximum array index where <code>value</code> is found.
            </param>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.FloorIndex``1(``0[],``0)">
            <summary>
            Index of last element &gt; value in sorted array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.CeilIndex``1(``0[],``0)">
            <summary>
            Index of first element &lt; value in sorted array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.FloorIndex``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Index of last element &gt; value in sorted array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.CeilIndex``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Index of first element &lt; value in sorted array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.FloorIndex``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Index of last element &gt; value in sorted array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ilist"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.CeilIndex``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Index of first element &lt; value in sorted array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ilist"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Revert``1(System.Collections.Generic.IList{``0})">
            <summary>
            Reverses the order of the values in the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.EqualArrays``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
                Compares the two given arrays and returns the equality of their contents. First the lengths of the
                given arrays are compared and then their contents.
            </summary>
            <param name="a">The first array.</param>
            <param name="b">The second array.</param>
            <returns>True when their contents are equal, false otherwise.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SplitArray``1(``0[],System.Int32)">
            <summary>
                Split the array x into n pieces.
            </summary>
            <typeparam name="T">No element type restriction.</typeparam>
            <param name="x">Array to be split into pieces.</param>
            <param name="n">Number of arrays the input array is going to be split into.</param>
            <returns>Array of arrays with the split result.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.SplitArrayBySize``1(``0[],System.Int32)">
            <summary>
                Split the array x into n pieces.
            </summary>
            <typeparam name="T">No element type restriction.</typeparam>
            <param name="x">Array to be split into pieces.</param>
            <param name="size">Maximal size of the chunks.</param>
            <returns>Array of arrays with the split result.</returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Split``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Split the array into pieces not larger than <code>size</code>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Num.ArrayUtils.Contains``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                Checks whether the given value is in the array.
            </summary>
            <typeparam name="T">The type of the array and value.</typeparam>
            <param name="array">The array to look for the value.</param>
            <param name="value">The value to look for.</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Param.BoolParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.BoolWithSubParams.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.DictionaryIntValueParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.DoubleParam.#ctor">
            <summary>
            only for xml serialization
            </summary>
        </member>
        <member name="M:BaseLibS.Param.FastaFilesParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.FileParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.FolderParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.IntParam.#ctor">
            <summary>
            only for xml serialization
            </summary>
        </member>
        <member name="M:BaseLibS.Param.LabelParam.#ctor">
            <summary>
            only for xml serialization
            </summary>
        </member>
        <member name="M:BaseLibS.Param.Ms1LabelParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.MultiChoiceMultiBinParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.MultiChoiceParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.MultiFileParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.MultiStringParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.ParamUtils.ConvertBack(BaseLibS.Param.Parameter)">
            <summary>
            Convert client side parameters back to <see cref="N:BaseLibS.Param"/>
            used for xml serialization
            </summary>
            <param name="p"></param>
            <returns>Server side version of parameter.</returns>
        </member>
        <member name="M:BaseLibS.Param.RegexMatchParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="T:BaseLibS.Param.SerializableDictionary`2">
            <summary>
            Adapted from http://huseyint.com/2007/12/xml-serializable-generic-dictionary-tipi/
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:BaseLibS.Param.SerializationHelper.ReadInto(System.Xml.XmlReader,System.Collections.Generic.List{System.String})">
            <summary>
            Read a list of strings &lt;List&gt; &lt;Item&gt; Value &lt;/Item&gt; &lt;/List&gt;.
            Element names are ignored
            </summary>
            <param name="reader"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Param.SerializationHelper.ReadInto(System.Xml.XmlReader,System.Collections.Generic.List{System.Int32})">
            <summary>
            Read a list of integers &lt;List&gt; &lt;Item&gt; Value &lt;/Item&gt; &lt;/List&gt;.
            Element names are ignored
            </summary>
            <param name="reader"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Param.SerializationHelper.ReadInto``1(System.Xml.XmlReader,System.Collections.Generic.List{``0})">
            <summary>
            Read a list of objects &lt;List&gt; &lt;Item&gt; Value &lt;/Item&gt; &lt;/List&gt;.
            Element names are ignored
            </summary>
            <param name="reader"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Param.SerializationHelper.ReadIntoNested``1(System.Xml.XmlReader,System.Collections.Generic.List{``0})">
            <summary>
            Read a neseted list of objects &lt;List&gt; &lt;Item&gt; Value with sub-elements &lt;/Item&gt; &lt;/List&gt;.
            Element names are ignored
            </summary>
            <param name="reader"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Param.SerializationHelper.ReadJagged2DArrayInto(System.Xml.XmlReader,System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}})">
            <summary>
            Read jagged array <code>int[][]</code>
            </summary>
            <param name="reader"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Param.SerializationHelper.WriteValues``1(System.Xml.XmlWriter,System.String,System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Write values with root tag <code>&lt;Root&gt; &lt;Item/&gt; &lt;Item/&gt; &lt;/Root&gt;</code>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer"></param>
            <param name="values"></param>
            <param name="childTag"></param>
        </member>
        <member name="M:BaseLibS.Param.SerializationHelper.WriteValues``1(System.Xml.XmlWriter,System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Write values without root tag <code>&lt;Item/&gt; &lt;Item/&gt;</code>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer"></param>
            <param name="values"></param>
            <param name="childTag"></param>
        </member>
        <member name="M:BaseLibS.Param.SingleChoiceParam.#ctor">
            <summary>
            only for xml serialization
            </summary>
        </member>
        <member name="M:BaseLibS.Param.SingleChoiceWithSubParams.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.RegexReplaceParam.#ctor">
            <summary>
            for xml serialization only
            </summary>
        </member>
        <member name="M:BaseLibS.Param.StringParam.#ctor">
            <summary>
            only for xml serialization
            </summary>
        </member>
        <member name="T:BaseLibS.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BaseLibS.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BaseLibS.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BaseLibS.Properties.Resources.names_dmp">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:BaseLibS.Properties.Resources.nodes_dmp">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:BaseLibS.Table.TableModelImpl">
            <summary>
            Partial implementation of <code>ITableModel</code>, implementing all functionality that is shared 
            between the full implementations of <code>ITableModel</code>.
            </summary>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.GetPlugins``1(System.String[],System.Boolean)">
            <summary>
            Search for assemblies under the specified wild-card file names.
            Instantiates and returns types from these assemlies which implement <code>T</code> and have a parameterless constructor
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filenames">File names with wild-cards</param>
            <param name="onlyActive">Check if <code>INamedListItem.IsActive</code> is set</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.GetBinaryReader(System.String)">
            <summary>
            Creates a <code>BinaryReader</code> reading from the given file path.
            </summary>
            <param name="path">File to read from.</param>
            <returns>The <code>BinaryReader</code>.</returns>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.GetResourceTextReader(System.String)">
            <summary>
            Creates a <code>StreamReader</code> reading from the given text resource within this assembly.
            </summary>
            <param name="name">Name of the resource to read from.</param>
            <returns>The <code>StreamReader</code>.</returns>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.GetResourceStream(System.String)">
            <summary>
            Creates a <code>Stream</code> reading from the given text resource within this assembly.
            </summary>
            <param name="name">Name of the resource to read from.</param>
            <returns>The <code>StreamReader</code>.</returns>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.ReadString(System.IO.BinaryReader)">
            <summary>
            Reads a string in a binary version which is purely ascii-encoded.
            </summary>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.WriteString(System.String,System.IO.BinaryWriter)">
            <summary>
            Writes a string in a binary version which is purely ascii-encoded.
            </summary>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.DeleteFile(System.String)">
            <summary>
            Deletes file after checking for its existence.
            </summary>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.Rmdir(System.String)">
            <summary>
            Removes all files and folders recursively in the specified folder 
            and the specified folder itself.
            </summary>
            <param name="path">Path of the folder to be removed.</param>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.GetBinaryWriter(System.String)">
            <summary>
            Creates a <code>BinaryWriter</code> writing to the given file path.
            </summary>
            <param name="path">File to write to.</param>
            <returns>The <code>BinaryWriter</code>.</returns>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.TestDirWritable(System.String)">
            <summary>
            Tests whether the directory corresponding to the given path is writable.
            </summary>
            <param name="path">Path of the directory.</param>
            <returns><code>true</code> if the directory corresponding to the given path is writable.</returns>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.RemoveFiles(System.String,System.String)">
            <summary>
            Remove all the files in the given path with the given suffix.
            </summary>
            <param name="path">The path to remove the files from.</param>
            <param name="suffix">The suffix of the files to remove.</param>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.GetFileName(System.String,System.Boolean)">
            <summary>
            Retrieves the filename of the given file path. When the extension is not required
            the parameter withExt should be set to false.
            </summary>
            <param name="filePath">The file path to retrieve the filename for.</param>
            <param name="withExt">Set to false when the extension is not required.</param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.GetPath(System.String)">
            <summary>
            Retrieves the path for the given absolute file path.
            </summary>
            <param name="filePath">The filename to retrieve the path for.</param>
            <returns>The path to the filename.</returns>
        </member>
        <member name="M:BaseLibS.Util.FileUtils.GetMd5HashFromFile(System.String)">
            <summary>
            Calculates the MD5 hash from the data stored in the fiven filename. The resulting byte
            array is automatically converted to string with the base64 algorithm, so it can be
            used for various string operations.
            </summary>
            <param name="filename">The file to retrieve the MD5 hash from.</param>
            <returns>The base64 encoded MD5 hash from the file.</returns>
        </member>
        <member name="M:BaseLibS.Util.WorkDispatcher.IsRunningOnMono">
            <summary>
            http://www.mono-project.com/docs/gui/winforms/porting-winforms-applications/
            </summary>
        </member>
        <member name="F:BaseLibS.Util.GlobalConstants.revPrefix">
            <summary>
            Prefix used for reverse protein sequences.
            </summary>
        </member>
        <member name="F:BaseLibS.Util.GlobalConstants.conPrefix">
            <summary>
            Prefix for proteins flagged as contaminants.
            </summary>
        </member>
        <member name="T:BaseLibS.Util.LockFile">
            <summary>
            Class for creation and tracking of a lock-file, which can be used by different
            processes to synchronyze their actions on a single directory. 
            
            <code>
            LockFile lock = new LockFile("d:\\test\\");
            try {
            	// wait indefinite for the lock
            	lock.Lock(-1);
            
            	// run functionality here
            } catch (Exception e) {
            	;
            }
            
            // release our lock when it exists.
            lock.Release();
            </code>
            </summary>
        </member>
        <member name="M:BaseLibS.Util.LockFile.#ctor(System.String,System.Random)">
            <summary>
            Constructs a new instance of a lock-file in the given path. After this the actual lock-file will not
            have been created, which needs to be done with a call to <see cref="M:BaseLibS.Util.LockFile.Lock"/>. When the directory does
            not exist it is created.
            </summary>
            <param name="path">The path where the lock-file is to be written.</param>
        </member>
        <member name="M:BaseLibS.Util.LockFile.Lock">
            <summary>
            Creates the actual lock-file, securing exclusive usage of the required resources in a multi-process
            system. A maximum waiting time can be set to wait for gaining the lock on the file, which is set
            to infinity with the value -1 (ie the process waits indefinitely).
            </summary>
            <returns>True when the lock has succeeded, false otherwise.</returns>
        </member>
        <member name="M:BaseLibS.Util.LockFile.Release">
            <summary>
            Releases the lock-file so other processes can grab the resources.
            </summary>
        </member>
        <member name="F:BaseLibS.Util.StringUtils.subscripts">
            <summary>
            The digits 0 to 9 as subscripts.
            </summary>
        </member>
        <member name="F:BaseLibS.Util.StringUtils.superscripts">
            <summary>
            The digits 0 to 9 as superscripts.
            </summary>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.ToSuperscript(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns a string containing a representation of the given integer as superscript.
            </summary>
            <param name="n">The integer to be converted to superscript.</param>
            <param name="explicitPlus">Whether or not a '+' is added in front of positive numbers.</param>
            <param name="explicitBracket"></param>
            <returns>Representation of the given integer as superscript string.</returns>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.ToSubscript(System.Int32,System.Boolean)">
            <summary>
            Returns a string containing a representation of the given integer as subscript.
            </summary>
            <param name="n">The integer to be converted to subscript.</param>
            <param name="explicitPlus">Whether or not a '+' is added in front of positive numbers.</param>
            <returns>Representation of the given integer as subscript string.</returns>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.Concat``1(System.String,``0[])">
            <summary>
            Concatenates the string representations of the objects in the given array using the specified separator.
            </summary>
            <typeparam name="T">Type of objects to be concatenated as strings.</typeparam>
            <param name="separator">A string used to separate the array members.</param>
            <param name="o">The list of objects to be concatenated.</param>
            <returns>The concatenated string of all string representations of the array members.</returns>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.Concat``1(System.String,``0[],System.Int32)">
            <summary>
            Concatenates the string representations of the objects in the given array using the specified separator.
            </summary>
            <typeparam name="T">Type of objects to be concatenated as strings.</typeparam>
            <param name="separator">A string used to separate the array members.</param>
            <param name="o">The list of objects to be concatenated.</param>
            <param name="maxLen">The convatenation is terminated such that the length of the resulting string will not exceed this value.</param>
            <returns>The concatenated string of all string representations of the array members.</returns>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.Concat``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Concatenates the string representations of the objects in the given array using the specified separator.
            </summary>
            <typeparam name="T">Type of objects to be concatenated as strings.</typeparam>
            <param name="separator">A string used to separate the array members.</param>
            <param name="o">The list of objects to be concatenated.</param>
            <returns>The concatenated string of all string representations of the array members.</returns>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.Concat``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the string representations of the objects in the given array using the specified separator.
            </summary>
            <typeparam name="T">Type of objects to be concatenated as strings.</typeparam>
            <param name="separator">A string used to separate the array members.</param>
            <param name="o">The list of objects to be concatenated.</param>
            <returns>The concatenated string of all string representations of the array members.</returns>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.Wrap(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.RemoveWhitespace(System.String)">
            <summary>
            Returns a string that is the same as the input string, except that all whitespace characters are removed.
            </summary>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.ReplaceWhitespace(System.String,System.String)">
            <summary>
            Returns a string that is the same as the input string, except that all whitespace characters are replaced.
            </summary>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.ReduceWhitespace(System.String)">
            <summary>
            Returns a string that is the same as the input string, except that all consecutive sets of whitespace 
            characters are replaced by a single blank character.
            </summary>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.ReplaceCharactersForFilename(System.String)">
            <summary>
            Replaces occurences of characters that are problematic in file names or paths with an underscore.
            </summary>
        </member>
        <member name="F:BaseLibS.Util.StringUtils.invalidR">
            <summary>
            Contains all the invalid characters of strings for R. These can be replaced
            with the appropriate values with the function <see cref="M:BaseLibS.Util.StringUtils.Replace(System.String,System.String[][])"/>.
            </summary>
        </member>
        <member name="M:BaseLibS.Util.StringUtils.Replace(System.String,System.String[][])">
            <summary>
            Replaces the occurances in the given string of the chs[][0] vector with the chs[][1]. Predefined
            values can be found in <see cref="F:BaseLibS.Util.StringUtils.invalidR"/> and <see cref="F:BaseLibS.Util.StringUtils.notInFilenames"/>.
            </summary>
            <param name="str">The string to be converted</param>
            <param name="chs">The mapping.</param>
            <returns>The new string.</returns>
        </member>
        <member name="M:BaseLibS.Util.XmlSerialization.SerializeObject(System.Object,System.String)">
            <summary>
            Method to convert a custom Object to XML string
            </summary>
            <param name="item">Object that is to be serialized to XML</param>
            <param name="path"></param>
        </member>
        <member name="M:BaseLibS.Util.XmlSerialization.Save(System.Object,System.IO.Stream)">
            <summary>
            Method to convert a custom Object to XML string
            </summary>
            <param name="item">Object that is to be serialized to XML</param>
            <param name="stream"></param>
        </member>
        <member name="M:BaseLibS.Util.XmlSerialization.DeserializeObject(System.String,System.Type)">
            <summary>
            Method to reconstruct an Object from XML string
            </summary>
            <param name="path">Filepath of serialized Object</param>
            <param name="type">Type of Object in XML</param>     
            <returns>Object in xml. If error occured or validation not passed than null.</returns>
        </member>
    </members>
</doc>
